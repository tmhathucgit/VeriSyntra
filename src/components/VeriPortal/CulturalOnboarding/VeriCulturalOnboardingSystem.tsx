// VeriPortal Cultural Onboarding Main Component - Vietnamese AI/ML Enhanced System
// Implementation Status: ‚úÖ IMPLEMENTED

import React, { useState, useEffect, useContext, createContext } from 'react';
import { useTranslation } from 'react-i18next';
import type {
  VeriCulturalOnboardingSystem as VeriCulturalOnboardingSystemType,
  VeriOnboardingStep,
  VeriCulturalContext,
  VeriAICulturalEngine,
  VeriMLPersonalizationEngine,
  VeriAutomationEngine,
  VeriAIInsights
} from './types';
import {
  VeriOnboardingProgress,
  VeriOnboardingContent,
  VeriAIInsightsDashboard
} from './components';
import { VeriPortalLayout } from '../VeriPortalLayout';
import {
  initializeVeriAICulturalEngine,
  startVeriMLCulturalAnalysis,
  enableVeriAutomationEngine
} from './services';

// Vietnamese Cultural Onboarding Context
interface VeriOnboardingContextType {
  veriOnboardingState?: VeriCulturalOnboardingSystemType;
  veriCurrentStep: VeriOnboardingStep;
  veriLanguage: 'vietnamese' | 'english';
  veriCulturalContext?: VeriCulturalContext;
  veriAIEngine?: VeriAICulturalEngine;
  veriMLPersonalization?: VeriMLPersonalizationEngine;
  veriAutomationEngine?: VeriAutomationEngine;
  veriAIInsights?: VeriAIInsights[];
  setVeriCurrentStep: (step: VeriOnboardingStep) => void;
  setVeriLanguage: (lang: 'vietnamese' | 'english') => void;
}

const VeriOnboardingContext = createContext<VeriOnboardingContextType | undefined>(undefined);

// Custom hook for using the onboarding context
export const useVeriOnboardingContext = () => {
  const context = useContext(VeriOnboardingContext);
  if (!context) {
    throw new Error('useVeriOnboardingContext must be used within VeriOnboardingProvider');
  }
  return context;
};

// AI-Powered Vietnamese Cultural Onboarding Provider
interface VeriOnboardingProviderProps {
  children: React.ReactNode;
  veriLanguage: 'vietnamese' | 'english';
  veriCulturalContext?: VeriCulturalContext;
  veriOnboardingState?: VeriCulturalOnboardingSystemType;
  veriAIEngine?: VeriAICulturalEngine;
  veriMLPersonalization?: VeriMLPersonalizationEngine;
  veriAutomationEngine?: VeriAutomationEngine;
  veriAIInsights?: VeriAIInsights[];
}

export const VeriAIPoweredCulturalOnboardingProvider: React.FC<VeriOnboardingProviderProps> = ({
  children,
  veriLanguage: initialLanguage,
  veriCulturalContext: initialContext,
  veriOnboardingState: initialState,
  veriAIEngine: initialAIEngine,
  veriMLPersonalization: initialMLPersonalization,
  veriAutomationEngine: initialAutomationEngine,
  veriAIInsights: initialAIInsights
}) => {
  const [veriOnboardingState] = useState<VeriCulturalOnboardingSystemType | undefined>(initialState);
  const [veriCurrentStep, setVeriCurrentStep] = useState<VeriOnboardingStep>('cultural-introduction');
  const [veriLanguage, setVeriLanguage] = useState<'vietnamese' | 'english'>(initialLanguage);
  const [veriCulturalContext, setVeriCulturalContext] = useState<VeriCulturalContext | undefined>(initialContext);
  const [veriAIEngine, setVeriAIEngine] = useState<VeriAICulturalEngine | undefined>(initialAIEngine);
  const [veriMLPersonalization, setVeriMLPersonalization] = useState<VeriMLPersonalizationEngine | undefined>(initialMLPersonalization);
  const [veriAutomationEngine, setVeriAutomationEngine] = useState<VeriAutomationEngine | undefined>(initialAutomationEngine);
  const [veriAIInsights, setVeriAIInsights] = useState<VeriAIInsights[] | undefined>(initialAIInsights);

  // Sync language with parent component - ensure provider state updates
  useEffect(() => {
    console.log(`üîÑ Provider: Syncing language to ${initialLanguage}`);
    setVeriLanguage(initialLanguage);
  }, [initialLanguage]);

  const contextValue: VeriOnboardingContextType = {
    veriOnboardingState,
    veriCurrentStep,
    veriLanguage,
    veriCulturalContext,
    veriAIEngine,
    veriMLPersonalization,
    veriAutomationEngine,
    veriAIInsights,
    setVeriCurrentStep,
    setVeriLanguage
  };

  return (
    <VeriOnboardingContext.Provider value={contextValue}>
      {children}
    </VeriOnboardingContext.Provider>
  );
};

// Vietnamese Onboarding Step Order
const veriOnboardingSteps: VeriOnboardingStep[] = [
  'cultural-introduction',
  'business-profile-setup',
  'regional-adaptation',
  'cultural-preferences',
  'compliance-readiness',
  'completion-summary'
];

// AI-Powered Main Vietnamese Cultural Onboarding Component
export const VeriCulturalOnboardingSystem: React.FC = () => {
  const { i18n } = useTranslation();
  const [veriOnboardingState, setVeriOnboardingState] = useState<VeriCulturalOnboardingSystemType>();
  const [veriCurrentStep, setVeriCurrentStep] = useState<VeriOnboardingStep>('cultural-introduction');
  
  // Initialize with current i18n language state to avoid desynchronization
  const [veriLanguage, setVeriLanguage] = useState<'vietnamese' | 'english'>(() => {
    return i18n.language === 'vi' ? 'vietnamese' : 'english';
  });
  const [veriCulturalContext, setVeriCulturalContext] = useState<VeriCulturalContext>();

  // Keep VeriPortal state synchronized with global i18n state changes
  useEffect(() => {
    const handleLanguageChange = (lang: string) => {
      const newVeriLang = lang === 'vi' ? 'vietnamese' : 'english';
      console.log(`üîÑ VeriPortal: Syncing with global i18n change ${lang} ‚Üí ${newVeriLang}`);
      setVeriLanguage(newVeriLang);
    };

    // Listen for i18n language changes
    i18n.on('languageChanged', handleLanguageChange);

    // Cleanup listener on unmount
    return () => {
      i18n.off('languageChanged', handleLanguageChange);
    };
  }, [i18n]);
  const [veriAIEngine, setVeriAIEngine] = useState<VeriAICulturalEngine>();
  const [veriMLPersonalization, setVeriMLPersonalization] = useState<VeriMLPersonalizationEngine>();
  const [veriAutomationEngine, setVeriAutomationEngine] = useState<VeriAutomationEngine>();
  const [veriAIInsights, setVeriAIInsights] = useState<VeriAIInsights[]>();
  const [veriIsLoading, setVeriIsLoading] = useState(true);
  const [veriInitializationComplete, setVeriInitializationComplete] = useState(false);

  // AI-powered automatic cultural detection and adaptation
  useEffect(() => {
    const initializeAISystem = async () => {
      try {
        setVeriIsLoading(true);
        
        // Initialize AI Cultural Engine
        console.log('ü§ñ Initializing VeriPortal AI Cultural Engine...');
        const aiEngine = await initializeVeriAICulturalEngine();
        setVeriAIEngine(aiEngine);
        
        // Start ML-powered cultural analysis
        console.log('üß† Starting ML Cultural Analysis...');
        const culturalData = await startVeriMLCulturalAnalysis(veriLanguage);
        setVeriCulturalContext(culturalData.veriContext);
        setVeriAIInsights(culturalData.veriAIInsights);
        
        // Enable AI automation
        console.log('‚ö° Enabling AI Automation Engine...');
        const automationEngine = await enableVeriAutomationEngine();
        setVeriAutomationEngine(automationEngine);
        
        setVeriInitializationComplete(true);
        console.log('‚úÖ VeriPortal AI/ML System Initialized Successfully!');
      } catch (error) {
        console.error('‚ùå Error initializing VeriPortal AI system:', error);
      } finally {
        setVeriIsLoading(false);
      }
    };

    initializeAISystem();
  }, []);

  // AI-powered real-time personalization
  useEffect(() => {
    if (veriAIEngine && veriCulturalContext && !veriMLPersonalization) {
      const initializePersonalization = async () => {
        try {
          console.log('üéØ Initializing ML Personalization...');
          const personalization = await veriAIEngine.veriMLCulturalModel
            .optimizeCulturalAdaptation(veriCulturalContext);
          
          // Create ML personalization engine
          const mlPersonalization: VeriMLPersonalizationEngine = {
            veriMLUserBehaviorModel: {
              analyzeBehavior: async (interactions) => ({
                veriUserSegment: 'vietnamese-business',
                veriEngagementLevel: 0.85,
                veriLearningStyle: 'visual-guided',
                veriPreferredPace: 'moderate'
              })
            },
            veriAIPersonalizationAlgorithm: {
              personalizeExperience: async (context) => ({
                veriPersonalizedContent: true,
                veriAdaptedInterface: true
              })
            },
            veriMLContentOptimization: {
              optimizeContent: async (content, context) => content,
              optimizeLanguageTransition: async (language, analysis) => ({
                veriRecommendedLanguage: language,
                veriConfidence: 0.92
              })
            },
            veriAutomatedUserJourney: {
              optimizeJourney: async (profile) => veriOnboardingSteps
            },
            veriAIEngagementOptimizer: {
              optimizeEngagement: async (context) => ({
                veriOptimizedEngagement: true
              })
            }
          };
          
          setVeriMLPersonalization(mlPersonalization);
          console.log('‚úÖ ML Personalization Engine Ready!');
        } catch (error) {
          console.error('‚ùå Error initializing ML personalization:', error);
        }
      };

      initializePersonalization();
    }
  }, [veriAIEngine, veriCulturalContext]);

  // Handle step progression with AI optimization
  const veriHandleStepProgression = async (nextStep: VeriOnboardingStep) => {
    if (veriAutomationEngine?.veriMLWorkflowOptimization) {
      try {
        const optimizedStep = await veriAutomationEngine.veriMLWorkflowOptimization
          .optimizeNextStep(nextStep, veriCulturalContext!);
        setVeriCurrentStep(optimizedStep);
      } catch (error) {
        console.error('‚ùå Error optimizing step progression:', error);
        setVeriCurrentStep(nextStep);
      }
    } else {
      setVeriCurrentStep(nextStep);
    }
  };

  // Loading state
  if (veriIsLoading || !veriInitializationComplete) {
    return (
      <div className="veri-loading-container">
        <div className="veri-loading-spinner">
          <div className="veri-vietnam-flag">üáªüá≥</div>
          <div className="veri-loading-text">
            {veriLanguage === 'vietnamese' 
              ? 'ƒêang kh·ªüi t·∫°o VeriPortal AI...' 
              : 'Initializing VeriPortal AI...'
            }
          </div>
          <div className="veri-loading-progress">
            <div className="veri-progress-bar"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <VeriPortalLayout 
      veriLanguage={veriLanguage}
      veriCurrentLanguage={veriLanguage}
      setVeriLanguage={(newLanguage) => {
        console.log(`üî• VeriPortal: Language change request from ${veriLanguage} to ${newLanguage}`);
        
        // Only update i18n - component state will be updated by the useEffect listener
        const i18nLang = newLanguage === 'vietnamese' ? 'vi' : 'en';
        i18n.changeLanguage(i18nLang);
        
        console.log(`üî• VeriPortal: i18n.changeLanguage(${i18nLang}) called - state will sync automatically`);
      }}
    >
      <VeriAIPoweredCulturalOnboardingProvider
        veriLanguage={veriLanguage}
        veriCulturalContext={veriCulturalContext}
        veriOnboardingState={veriOnboardingState}
        veriAIEngine={veriAIEngine}
        veriMLPersonalization={veriMLPersonalization}
        veriAutomationEngine={veriAutomationEngine}
        veriAIInsights={veriAIInsights}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          {/* Welcome Section - Moved from VeriCulturalIntroductionStep */}
          <div className="space-y-8 mb-8">
            {/* Hero Section - Landing Page Style */}
            <div className="text-center space-y-6">
              <div className="inline-flex items-center space-x-2 bg-emerald-100 text-emerald-700 px-4 py-2 rounded-full text-sm font-medium">
                <span className="text-lg">üáªüá≥</span>
                <span>{veriLanguage === 'vietnamese' ? 'Onboarding VƒÉn h√≥a Vi·ªát' : 'Vietnamese Cultural Onboarding'}</span>
              </div>

              <h1 className="text-4xl sm:text-5xl font-bold text-gray-900 leading-tight">
                {veriLanguage === 'vietnamese' ? 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ' : 'Welcome to '}
                <span className="text-orange-500 bg-gradient-to-r from-orange-500 to-emerald-600 bg-clip-text text-transparent">
                  VeriPortal
                </span>
              </h1>

              <p className="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto">
                {veriLanguage === 'vietnamese' 
                  ? 'Ch√∫ng t√¥i hi·ªÉu vƒÉn h√≥a kinh doanh Vi·ªát Nam v√† s·∫Ω ƒëi·ªÅu ch·ªânh tr·∫£i nghi·ªám ph√π h·ª£p v·ªõi doanh nghi·ªáp c·ªßa b·∫°n'
                  : 'We understand Vietnamese business culture and will tailor the experience to fit your business'
                }
              </p>
            </div>

            {/* Description Card - Landing Page Style */}
            <div className="bg-gradient-to-r from-orange-50 to-emerald-50 rounded-3xl p-8 border border-orange-100">
              <div className="space-y-6">
                <p className="text-lg text-gray-700 leading-relaxed text-center">
                  {veriLanguage === 'vietnamese'
                    ? 'Ch√∫ng t√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·ª´ng b∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o doanh nghi·ªáp c·ªßa b·∫°n tu√¢n th·ªß PDPL 2025 m·ªôt c√°ch hi·ªáu qu·∫£ v√† ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam.'
                    : 'We will guide you step by step to ensure your business complies with PDPL 2025 effectively and in accordance with Vietnamese culture.'
                  }
                </p>
                <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 border border-emerald-100">
                  <div className="flex items-center justify-center space-x-3">
                    <div className="w-3 h-3 bg-gradient-to-r from-orange-500 to-emerald-600 rounded-full"></div>
                    <p className="text-gray-800 font-medium">
                      {veriLanguage === 'vietnamese'
                        ? 'Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám ph√π h·ª£p v·ªõi vƒÉn h√≥a doanh nghi·ªáp Vi·ªát Nam'
                        : 'We are committed to providing an experience that fits Vietnamese business culture'
                      }
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Progress Card */}
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
            <VeriOnboardingProgress
              veriCurrentStep={veriCurrentStep}
              veriTotalSteps={veriOnboardingSteps.length}
              veriCulturalStyle={veriCulturalContext?.veriCommunicationStyle}
              veriSteps={veriOnboardingSteps}
            />
          </div>
          
          {/* Main Content Card */}
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-100 p-8 mb-8">
            <VeriOnboardingContent
              key={`content-${veriLanguage}`}
              veriCurrentStep={veriCurrentStep}
              veriLanguage={veriLanguage}
              veriCulturalContext={veriCulturalContext}
              veriAIEngine={veriAIEngine}
              veriMLPersonalization={veriMLPersonalization}
              veriAutomationEngine={veriAutomationEngine}
              veriAIInsights={veriAIInsights}
              veriOnNext={veriHandleStepProgression}
              veriOnPrevious={(prevStep) => setVeriCurrentStep(prevStep)}
            />
          </div>
          
          {/* AI Insights Dashboard Card */}
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-100 p-6">
            <VeriAIInsightsDashboard
              veriAIInsights={veriAIInsights}
              veriMLRecommendations={veriMLPersonalization}
              veriAutomationStatus={veriAutomationEngine?.veriAutomationStatus}
              veriLanguage={veriLanguage}
            />
          </div>
        </div>
      </VeriAIPoweredCulturalOnboardingProvider>
    </VeriPortalLayout>
  );
};

// Export default component
export default VeriCulturalOnboardingSystem;